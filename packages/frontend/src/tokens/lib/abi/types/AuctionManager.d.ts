/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AuctionManagerInterface extends ethers.utils.Interface {
  functions: {
    "auctionDuration()": FunctionFragment;
    "currentAuction()": FunctionFragment;
    "dilutionBound()": FunctionFragment;
    "dustThreshold()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceSpan()": FunctionFragment;
    "renounceMinter()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rotateAuctions()": FunctionFragment;
    "sellThreshold()": FunctionFragment;
    "setAuctionDuration(uint256)": FunctionFragment;
    "setDulutionBound(uint256)": FunctionFragment;
    "setDustThreshold(uint256)": FunctionFragment;
    "setPriceSpan(uint256)": FunctionFragment;
    "setSellThreshold(uint256)": FunctionFragment;
    "swipe(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dilutionBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dustThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceSpan", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rotateAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDulutionBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDustThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSpan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swipe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dilutionBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dustThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceSpan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rotateAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDulutionBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDustThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSpan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swipe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Data(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Data"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class AuctionManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AuctionManagerInterface;

  functions: {
    auctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "auctionDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentAuction(overrides?: CallOverrides): Promise<[string]>;

    "currentAuction()"(overrides?: CallOverrides): Promise<[string]>;

    dilutionBound(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    dustThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dustThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    priceSpan(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceSpan()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceMinter()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rotateAuctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rotateAuctions()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sellThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAuctionDuration(
      _auctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAuctionDuration(uint256)"(
      _auctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDulutionBound(
      _dilutionBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDulutionBound(uint256)"(
      _dilutionBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDustThreshold(
      _dustThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDustThreshold(uint256)"(
      _dustThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceSpan(
      _priceSpan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPriceSpan(uint256)"(
      _priceSpan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSellThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSellThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swipe(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swipe(address)"(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentAuction(overrides?: CallOverrides): Promise<string>;

  "currentAuction()"(overrides?: CallOverrides): Promise<string>;

  dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

  "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

  dustThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "dustThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  priceSpan(overrides?: CallOverrides): Promise<BigNumber>;

  "priceSpan()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceMinter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceMinter()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rotateAuctions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rotateAuctions()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "sellThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  setAuctionDuration(
    _auctionDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAuctionDuration(uint256)"(
    _auctionDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDulutionBound(
    _dilutionBound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDulutionBound(uint256)"(
    _dilutionBound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDustThreshold(
    _dustThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDustThreshold(uint256)"(
    _dustThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceSpan(
    _priceSpan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPriceSpan(uint256)"(
    _priceSpan: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSellThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSellThreshold(uint256)"(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swipe(
    tokenAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swipe(address)"(
    tokenAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentAuction(overrides?: CallOverrides): Promise<string>;

    "currentAuction()"(overrides?: CallOverrides): Promise<string>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    dustThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "dustThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    priceSpan(overrides?: CallOverrides): Promise<BigNumber>;

    "priceSpan()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceMinter(overrides?: CallOverrides): Promise<void>;

    "renounceMinter()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rotateAuctions(overrides?: CallOverrides): Promise<void>;

    "rotateAuctions()"(overrides?: CallOverrides): Promise<void>;

    sellThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "sellThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAuctionDuration(
      _auctionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionDuration(uint256)"(
      _auctionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDulutionBound(
      _dilutionBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDulutionBound(uint256)"(
      _dilutionBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDustThreshold(
      _dustThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDustThreshold(uint256)"(
      _dustThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSpan(
      _priceSpan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceSpan(uint256)"(
      _priceSpan: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSellThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swipe(tokenAddr: string, overrides?: CallOverrides): Promise<void>;

    "swipe(address)"(
      tokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Data(
      data: BigNumberish | null,
      dataB: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { data: BigNumber; dataB: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentAuction(overrides?: CallOverrides): Promise<BigNumber>;

    "currentAuction()"(overrides?: CallOverrides): Promise<BigNumber>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    dustThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "dustThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceSpan(overrides?: CallOverrides): Promise<BigNumber>;

    "priceSpan()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceMinter()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rotateAuctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rotateAuctions()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "sellThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAuctionDuration(
      _auctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAuctionDuration(uint256)"(
      _auctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDulutionBound(
      _dilutionBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDulutionBound(uint256)"(
      _dilutionBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDustThreshold(
      _dustThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDustThreshold(uint256)"(
      _dustThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceSpan(
      _priceSpan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPriceSpan(uint256)"(
      _priceSpan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSellThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSellThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swipe(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swipe(address)"(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentAuction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dilutionBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dustThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dustThreshold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceSpan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceSpan()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceMinter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceMinter()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rotateAuctions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rotateAuctions()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sellThreshold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuctionDuration(
      _auctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAuctionDuration(uint256)"(
      _auctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDulutionBound(
      _dilutionBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDulutionBound(uint256)"(
      _dilutionBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDustThreshold(
      _dustThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDustThreshold(uint256)"(
      _dustThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSpan(
      _priceSpan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPriceSpan(uint256)"(
      _priceSpan: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSellThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSellThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swipe(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swipe(address)"(
      tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
