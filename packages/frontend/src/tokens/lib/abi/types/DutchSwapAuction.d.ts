/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DutchSwapAuctionInterface extends ethers.utils.Interface {
  functions: {
    "auctionEnded()": FunctionFragment;
    "auctionSuccessful()": FunctionFragment;
    "auctionToken()": FunctionFragment;
    "calculateCommitment(uint256)": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "clearingPrice()": FunctionFragment;
    "commitEth()": FunctionFragment;
    "commitEthFrom(address)": FunctionFragment;
    "commitTokens(uint256)": FunctionFragment;
    "commitTokensFrom(address,uint256)": FunctionFragment;
    "commitments(address)": FunctionFragment;
    "commitmentsTotal()": FunctionFragment;
    "endDate()": FunctionFragment;
    "finaliseAuction()": FunctionFragment;
    "finalised()": FunctionFragment;
    "initDutchAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)": FunctionFragment;
    "minimumPrice()": FunctionFragment;
    "paymentCurrency()": FunctionFragment;
    "priceDrop()": FunctionFragment;
    "priceFunction()": FunctionFragment;
    "startDate()": FunctionFragment;
    "startPrice()": FunctionFragment;
    "tokenPrice()": FunctionFragment;
    "tokenWithdrawn()": FunctionFragment;
    "tokensClaimable(address)": FunctionFragment;
    "tokensRemaining()": FunctionFragment;
    "totalTokens()": FunctionFragment;
    "totalTokensCommitted()": FunctionFragment;
    "wallet()": FunctionFragment;
    "withdrawTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctionEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSuccessful",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "clearingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "commitEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitEthFrom",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commitTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitTokensFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "commitments", values: [string]): string;
  encodeFunctionData(
    functionFragment: "commitmentsTotal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finaliseAuction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalised", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initDutchAuction",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceDrop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFunction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensClaimable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitEthFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTokensFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitmentsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finaliseAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initDutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceDrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "AddedCommitment(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedCommitment"): EventFragment;
}

export class DutchSwapAuction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DutchSwapAuctionInterface;

  functions: {
    auctionEnded(overrides?: CallOverrides): Promise<[boolean]>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<[boolean]>;

    auctionSuccessful(overrides?: CallOverrides): Promise<[boolean]>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<[boolean]>;

    auctionToken(overrides?: CallOverrides): Promise<[string]>;

    "auctionToken()"(overrides?: CallOverrides): Promise<[string]>;

    calculateCommitment(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { committed: BigNumber }>;

    "calculateCommitment(uint256)"(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { committed: BigNumber }>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "clearingPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    commitEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitEth()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitEthFrom(
      _from: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitEthFrom(address)"(
      _from: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "commitTokensFrom(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitments(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    commitmentsTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "commitmentsTotal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    endDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    finaliseAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "finaliseAuction()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalised(overrides?: CallOverrides): Promise<[boolean]>;

    "finalised()"(overrides?: CallOverrides): Promise<[boolean]>;

    initDutchAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initDutchAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    paymentCurrency(overrides?: CallOverrides): Promise<[string]>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    priceDrop(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceDrop()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceFunction(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceFunction()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    startPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenWithdrawn(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenWithdrawn()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokensRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokensRemaining()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalTokens()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokensCommitted(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalTokensCommitted()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    wallet(overrides?: CallOverrides): Promise<[string]>;

    "wallet()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  auctionEnded(overrides?: CallOverrides): Promise<boolean>;

  "auctionEnded()"(overrides?: CallOverrides): Promise<boolean>;

  auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

  "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

  auctionToken(overrides?: CallOverrides): Promise<string>;

  "auctionToken()"(overrides?: CallOverrides): Promise<string>;

  calculateCommitment(
    _commitment: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateCommitment(uint256)"(
    _commitment: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clearingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "clearingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  commitEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitEth()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitEthFrom(
    _from: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitEthFrom(address)"(
    _from: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitTokens(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitTokens(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitTokensFrom(
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "commitTokensFrom(address,uint256)"(
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "commitments(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  commitmentsTotal(overrides?: CallOverrides): Promise<BigNumber>;

  "commitmentsTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

  endDate(overrides?: CallOverrides): Promise<BigNumber>;

  "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  finaliseAuction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "finaliseAuction()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalised(overrides?: CallOverrides): Promise<boolean>;

  "finalised()"(overrides?: CallOverrides): Promise<boolean>;

  initDutchAuction(
    _funder: string,
    _token: string,
    _totalTokens: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _paymentCurrency: string,
    _startPrice: BigNumberish,
    _minimumPrice: BigNumberish,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initDutchAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)"(
    _funder: string,
    _token: string,
    _totalTokens: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _paymentCurrency: string,
    _startPrice: BigNumberish,
    _minimumPrice: BigNumberish,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  paymentCurrency(overrides?: CallOverrides): Promise<string>;

  "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

  priceDrop(overrides?: CallOverrides): Promise<BigNumber>;

  "priceDrop()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceFunction(overrides?: CallOverrides): Promise<BigNumber>;

  "priceFunction()"(overrides?: CallOverrides): Promise<BigNumber>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  startPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "startPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenWithdrawn()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensClaimable(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokensClaimable(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokensRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  "tokensRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "totalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokensCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  "totalTokensCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

  wallet(overrides?: CallOverrides): Promise<string>;

  "wallet()"(overrides?: CallOverrides): Promise<string>;

  withdrawTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawTokens()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionEnded(overrides?: CallOverrides): Promise<boolean>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<boolean>;

    auctionSuccessful(overrides?: CallOverrides): Promise<boolean>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<boolean>;

    auctionToken(overrides?: CallOverrides): Promise<string>;

    "auctionToken()"(overrides?: CallOverrides): Promise<string>;

    calculateCommitment(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCommitment(uint256)"(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "clearingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    commitEth(overrides?: CallOverrides): Promise<void>;

    "commitEth()"(overrides?: CallOverrides): Promise<void>;

    commitEthFrom(_from: string, overrides?: CallOverrides): Promise<void>;

    "commitEthFrom(address)"(
      _from: string,
      overrides?: CallOverrides
    ): Promise<void>;

    commitTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitTokensFrom(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitmentsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "commitmentsTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    finaliseAuction(overrides?: CallOverrides): Promise<void>;

    "finaliseAuction()"(overrides?: CallOverrides): Promise<void>;

    finalised(overrides?: CallOverrides): Promise<boolean>;

    "finalised()"(overrides?: CallOverrides): Promise<boolean>;

    initDutchAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initDutchAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    minimumPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrency(overrides?: CallOverrides): Promise<string>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<string>;

    priceDrop(overrides?: CallOverrides): Promise<BigNumber>;

    "priceDrop()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFunction(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFunction()"(overrides?: CallOverrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    startPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "startPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenWithdrawn()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokensCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<string>;

    "wallet()"(overrides?: CallOverrides): Promise<string>;

    withdrawTokens(overrides?: CallOverrides): Promise<void>;

    "withdrawTokens()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AddedCommitment(
      addr: null,
      commitment: null,
      price: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { addr: string; commitment: BigNumber; price: BigNumber }
    >;
  };

  estimateGas: {
    auctionEnded(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionSuccessful(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionSuccessful()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionToken(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCommitment(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCommitment(uint256)"(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "clearingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    commitEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitEth()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitEthFrom(
      _from: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitEthFrom(address)"(
      _from: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "commitTokensFrom(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitmentsTotal(overrides?: CallOverrides): Promise<BigNumber>;

    "commitmentsTotal()"(overrides?: CallOverrides): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    finaliseAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "finaliseAuction()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalised(overrides?: CallOverrides): Promise<BigNumber>;

    "finalised()"(overrides?: CallOverrides): Promise<BigNumber>;

    initDutchAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initDutchAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceDrop(overrides?: CallOverrides): Promise<BigNumber>;

    "priceDrop()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFunction(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFunction()"(overrides?: CallOverrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    startPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "startPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenWithdrawn()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokensCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionEnded()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionSuccessful(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionSuccessful()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateCommitment(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateCommitment(uint256)"(
      _commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clearingPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitEth()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitEthFrom(
      _from: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitEthFrom(address)"(
      _from: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitTokens(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitTokensFrom(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "commitTokensFrom(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "commitments(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitmentsTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "commitmentsTotal()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finaliseAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "finaliseAuction()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finalised()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initDutchAuction(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initDutchAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _funder: string,
      _token: string,
      _totalTokens: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentCurrency()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceDrop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceDrop()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFunction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceFunction()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenWithdrawn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenWithdrawn()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensClaimable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensClaimable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokensRemaining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokensCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalTokensCommitted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
