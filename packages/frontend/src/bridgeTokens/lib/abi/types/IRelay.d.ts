/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRelayInterface extends ethers.utils.Interface {
  functions: {
    "addHeaders(bytes,bytes)": FunctionFragment;
    "addHeadersWithRetarget(bytes,bytes,bytes)": FunctionFragment;
    "findHeight(bytes32)": FunctionFragment;
    "getBestKnownDigest()": FunctionFragment;
    "getLastReorgCommonAncestor()": FunctionFragment;
    "isAncestor(bytes32,bytes32,uint256)": FunctionFragment;
    "markNewHeaviest(bytes32,bytes,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addHeaders",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addHeadersWithRetarget",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findHeight",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestKnownDigest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastReorgCommonAncestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAncestor",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markNewHeaviest",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addHeaders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addHeadersWithRetarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findHeight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBestKnownDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastReorgCommonAncestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAncestor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markNewHeaviest",
    data: BytesLike
  ): Result;

  events: {
    "Extension(bytes32,bytes32)": EventFragment;
    "NewTip(bytes32,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Extension"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTip"): EventFragment;
}

export class IRelay extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRelayInterface;

  functions: {
    addHeaders(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addHeaders(bytes,bytes)"(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addHeadersWithRetarget(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addHeadersWithRetarget(bytes,bytes,bytes)"(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findHeight(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "findHeight(bytes32)"(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBestKnownDigest(overrides?: CallOverrides): Promise<[string]>;

    "getBestKnownDigest()"(overrides?: CallOverrides): Promise<[string]>;

    getLastReorgCommonAncestor(overrides?: CallOverrides): Promise<[string]>;

    "getLastReorgCommonAncestor()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAncestor(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAncestor(bytes32,bytes32,uint256)"(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    markNewHeaviest(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "markNewHeaviest(bytes32,bytes,bytes,uint256)"(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addHeaders(
    _anchor: BytesLike,
    _headers: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addHeaders(bytes,bytes)"(
    _anchor: BytesLike,
    _headers: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addHeadersWithRetarget(
    _oldPeriodStartHeader: BytesLike,
    _oldPeriodEndHeader: BytesLike,
    _headers: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addHeadersWithRetarget(bytes,bytes,bytes)"(
    _oldPeriodStartHeader: BytesLike,
    _oldPeriodEndHeader: BytesLike,
    _headers: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findHeight(_digest: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "findHeight(bytes32)"(
    _digest: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBestKnownDigest(overrides?: CallOverrides): Promise<string>;

  "getBestKnownDigest()"(overrides?: CallOverrides): Promise<string>;

  getLastReorgCommonAncestor(overrides?: CallOverrides): Promise<string>;

  "getLastReorgCommonAncestor()"(overrides?: CallOverrides): Promise<string>;

  isAncestor(
    _ancestor: BytesLike,
    _descendant: BytesLike,
    _limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAncestor(bytes32,bytes32,uint256)"(
    _ancestor: BytesLike,
    _descendant: BytesLike,
    _limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  markNewHeaviest(
    _ancestor: BytesLike,
    _currentBest: BytesLike,
    _newBest: BytesLike,
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "markNewHeaviest(bytes32,bytes,bytes,uint256)"(
    _ancestor: BytesLike,
    _currentBest: BytesLike,
    _newBest: BytesLike,
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addHeaders(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addHeaders(bytes,bytes)"(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addHeadersWithRetarget(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addHeadersWithRetarget(bytes,bytes,bytes)"(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    findHeight(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findHeight(bytes32)"(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestKnownDigest(overrides?: CallOverrides): Promise<string>;

    "getBestKnownDigest()"(overrides?: CallOverrides): Promise<string>;

    getLastReorgCommonAncestor(overrides?: CallOverrides): Promise<string>;

    "getLastReorgCommonAncestor()"(overrides?: CallOverrides): Promise<string>;

    isAncestor(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAncestor(bytes32,bytes32,uint256)"(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    markNewHeaviest(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "markNewHeaviest(bytes32,bytes,bytes,uint256)"(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Extension(
      _first: BytesLike | null,
      _last: BytesLike | null
    ): TypedEventFilter<[string, string], { _first: string; _last: string }>;

    NewTip(
      _from: BytesLike | null,
      _to: BytesLike | null,
      _gcd: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { _from: string; _to: string; _gcd: string }
    >;
  };

  estimateGas: {
    addHeaders(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addHeaders(bytes,bytes)"(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addHeadersWithRetarget(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addHeadersWithRetarget(bytes,bytes,bytes)"(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findHeight(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findHeight(bytes32)"(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestKnownDigest(overrides?: CallOverrides): Promise<BigNumber>;

    "getBestKnownDigest()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastReorgCommonAncestor(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastReorgCommonAncestor()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAncestor(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAncestor(bytes32,bytes32,uint256)"(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markNewHeaviest(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "markNewHeaviest(bytes32,bytes,bytes,uint256)"(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addHeaders(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addHeaders(bytes,bytes)"(
      _anchor: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addHeadersWithRetarget(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addHeadersWithRetarget(bytes,bytes,bytes)"(
      _oldPeriodStartHeader: BytesLike,
      _oldPeriodEndHeader: BytesLike,
      _headers: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findHeight(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findHeight(bytes32)"(
      _digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestKnownDigest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestKnownDigest()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastReorgCommonAncestor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastReorgCommonAncestor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAncestor(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAncestor(bytes32,bytes32,uint256)"(
      _ancestor: BytesLike,
      _descendant: BytesLike,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markNewHeaviest(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "markNewHeaviest(bytes32,bytes,bytes,uint256)"(
      _ancestor: BytesLike,
      _currentBest: BytesLike,
      _newBest: BytesLike,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
