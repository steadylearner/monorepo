/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DutchSwapFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addCustomAuction(address)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "deployDutchAuction(address,uint256,uint256,uint256,address,uint256,uint256,address)": FunctionFragment;
    "deprecateFactory(address)": FunctionFragment;
    "dutchAuctionTemplate()": FunctionFragment;
    "initDutchSwapFactory(address,uint256)": FunctionFragment;
    "isChildAuction(address)": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "newAddress()": FunctionFragment;
    "numberOfAuctions()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFinalisedAuction(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDutchAuctionTemplate(address)": FunctionFragment;
    "setMinimumFee(uint256)": FunctionFragment;
    "transferAnyERC20Token(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCustomAuction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDutchAuction",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dutchAuctionTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initDutchSwapFactory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isChildAuction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFinalisedAuction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDutchAuctionTemplate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAnyERC20Token",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCustomAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployDutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dutchAuctionTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initDutchSwapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChildAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFinalisedAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDutchAuctionTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAnyERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionRemoved(address,uint256)": EventFragment;
    "AuctionTemplateUpdated(address,address)": EventFragment;
    "CustomAuctionDeployed(address,address)": EventFragment;
    "DutchAuctionDeployed(address,address,address,uint256)": EventFragment;
    "FactoryDeprecated(address)": EventFragment;
    "MinimumFeeUpdated(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTemplateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CustomAuctionDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DutchAuctionDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DutchSwapFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DutchSwapFactoryInterface;

  functions: {
    addCustomAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addCustomAuction(address)"(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployDutchAuction(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deployDutchAuction(address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecateFactory(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dutchAuctionTemplate(overrides?: CallOverrides): Promise<[string]>;

    "dutchAuctionTemplate()"(overrides?: CallOverrides): Promise<[string]>;

    initDutchSwapFactory(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initDutchSwapFactory(address,uint256)"(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isChildAuction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; index: BigNumber }>;

    "isChildAuction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; index: BigNumber }>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    newAddress(overrides?: CallOverrides): Promise<[string]>;

    "newAddress()"(overrides?: CallOverrides): Promise<[string]>;

    numberOfAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeFinalisedAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeFinalisedAuction(address)"(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDutchAuctionTemplate(
      _dutchAuctionTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDutchAuctionTemplate(address)"(
      _dutchAuctionTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAnyERC20Token(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferAnyERC20Token(address,uint256)"(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCustomAuction(
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addCustomAuction(address)"(
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "auctions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deployDutchAuction(
    _token: string,
    _tokenSupply: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _paymentCurrency: string,
    _startPrice: BigNumberish,
    _minimumPrice: BigNumberish,
    _wallet: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deployDutchAuction(address,uint256,uint256,uint256,address,uint256,uint256,address)"(
    _token: string,
    _tokenSupply: BigNumberish,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _paymentCurrency: string,
    _startPrice: BigNumberish,
    _minimumPrice: BigNumberish,
    _wallet: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecateFactory(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deprecateFactory(address)"(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dutchAuctionTemplate(overrides?: CallOverrides): Promise<string>;

  "dutchAuctionTemplate()"(overrides?: CallOverrides): Promise<string>;

  initDutchSwapFactory(
    _dutchAuctionTemplate: string,
    _minimumFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initDutchSwapFactory(address,uint256)"(
    _dutchAuctionTemplate: string,
    _minimumFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isChildAuction(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { exists: boolean; index: BigNumber }>;

  "isChildAuction(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { exists: boolean; index: BigNumber }>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  newAddress(overrides?: CallOverrides): Promise<string>;

  "newAddress()"(overrides?: CallOverrides): Promise<string>;

  numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeFinalisedAuction(
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeFinalisedAuction(address)"(
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDutchAuctionTemplate(
    _dutchAuctionTemplate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDutchAuctionTemplate(address)"(
    _dutchAuctionTemplate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumFee(
    _minimumFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinimumFee(uint256)"(
    _minimumFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAnyERC20Token(
    tokenAddress: string,
    tokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferAnyERC20Token(address,uint256)"(
    tokenAddress: string,
    tokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCustomAuction(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCustomAuction(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployDutchAuction(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployDutchAuction(address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deprecateFactory(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dutchAuctionTemplate(overrides?: CallOverrides): Promise<string>;

    "dutchAuctionTemplate()"(overrides?: CallOverrides): Promise<string>;

    initDutchSwapFactory(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initDutchSwapFactory(address,uint256)"(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isChildAuction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; index: BigNumber }>;

    "isChildAuction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { exists: boolean; index: BigNumber }>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    newAddress(overrides?: CallOverrides): Promise<string>;

    "newAddress()"(overrides?: CallOverrides): Promise<string>;

    numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeFinalisedAuction(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFinalisedAuction(address)"(
      _auction: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDutchAuctionTemplate(
      _dutchAuctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDutchAuctionTemplate(address)"(
      _dutchAuctionTemplate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAnyERC20Token(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferAnyERC20Token(address,uint256)"(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuctionRemoved(
      dutchAuction: null,
      index: null
    ): TypedEventFilter<
      [string, BigNumber],
      { dutchAuction: string; index: BigNumber }
    >;

    AuctionTemplateUpdated(
      oldDutchAuction: null,
      newDutchAuction: null
    ): TypedEventFilter<
      [string, string],
      { oldDutchAuction: string; newDutchAuction: string }
    >;

    CustomAuctionDeployed(
      owner: string | null,
      addr: string | null
    ): TypedEventFilter<[string, string], { owner: string; addr: string }>;

    DutchAuctionDeployed(
      owner: string | null,
      addr: string | null,
      dutchAuction: null,
      fee: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { owner: string; addr: string; dutchAuction: string; fee: BigNumber }
    >;

    FactoryDeprecated(
      newAddress: null
    ): TypedEventFilter<[string], { newAddress: string }>;

    MinimumFeeUpdated(
      oldFee: null,
      newFee: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addCustomAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addCustomAuction(address)"(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployDutchAuction(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deployDutchAuction(address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecateFactory(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dutchAuctionTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    "dutchAuctionTemplate()"(overrides?: CallOverrides): Promise<BigNumber>;

    initDutchSwapFactory(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initDutchSwapFactory(address,uint256)"(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isChildAuction(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isChildAuction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    newAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "newAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAuctions()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFinalisedAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeFinalisedAuction(address)"(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDutchAuctionTemplate(
      _dutchAuctionTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDutchAuctionTemplate(address)"(
      _dutchAuctionTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAnyERC20Token(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferAnyERC20Token(address,uint256)"(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCustomAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addCustomAuction(address)"(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployDutchAuction(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deployDutchAuction(address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      _token: string,
      _tokenSupply: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _paymentCurrency: string,
      _startPrice: BigNumberish,
      _minimumPrice: BigNumberish,
      _wallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecateFactory(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deprecateFactory(address)"(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dutchAuctionTemplate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dutchAuctionTemplate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initDutchSwapFactory(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initDutchSwapFactory(address,uint256)"(
      _dutchAuctionTemplate: string,
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isChildAuction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isChildAuction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfAuctions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFinalisedAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeFinalisedAuction(address)"(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDutchAuctionTemplate(
      _dutchAuctionTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDutchAuctionTemplate(address)"(
      _dutchAuctionTemplate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumFee(
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimumFee(uint256)"(
      _minimumFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAnyERC20Token(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferAnyERC20Token(address,uint256)"(
      tokenAddress: string,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
